generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  password       String
  name           String
  profilePicture String?
  hashedRefreshToken String?

  attachments    Attachment[]
  comments       Comment[]

  authoredTasks  Task[] @relation("TaskAuthor")
  assignedTasks  Task[] @relation("TaskAssignee")

  teams          TeamUser[]
  projectMembers ProjectMember[]
  ownedProjects  Project[] @relation("ProjectOwner")
}

model Team {
  id                 String      @id @default(uuid())
  name               String
  teamOwnerId String?

  projects           Project[]
  members            TeamUser[]
}

model TeamUser {
  userId  String
  teamId  String

  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team    Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId]) // Ensures a user is not added to the same team twice
}

model Project {
  id                String        @id @default(uuid())
  name              String
  description       String?
  startDate         DateTime
  endDate           DateTime
  teamId            String
  projectOwnerId    String
  createdOn         DateTime
  modifiedOn          DateTime
  projectMembers ProjectMember[]
  tasks       Task[]
  projectOwner      User @relation("ProjectOwner", fields: [projectOwnerId], references: [id])
  team              Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model ProjectMember {
  projectId String
  userId    String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId]) // Prevents duplicate assignments
}

model Task {
  id          String  @id @default(uuid())
  title       String
  description String?
  startDate   DateTime?
  dueDate     DateTime
  status      String?
  priority    String?
  tags        String[]
  authorId    String
  assigneeId  String?
  projectId   String?

  attachments Attachment[]
  comments    Comment[]

  author   User    @relation("TaskAuthor", fields: [authorId], references: [id])
  assignee User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  project  Project? @relation(fields: [projectId], references: [id])
}

model Attachment {
  id           String  @id @default(uuid())
  taskId       String
  uploadedById String
  url          String
  name         String?

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [id])
}

model Comment {
  id     String @id @default(uuid())
  text   String
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
